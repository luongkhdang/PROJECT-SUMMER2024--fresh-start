
https://neetcode.io/quiz/contains-duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Constraints:

1 <= nums.length <= 10^5
10^9 <= nums[i] <= 10^9





class Solution:
	def containsDuplicate(self, nums: List[int]) -> bool:
		hashset = set()
		for n in nums:
			if n in hashset:
				return True
			hashset.add(n)
		return False








##############################
How many possible pairs of elements are there in an array of size n?

n*(n-1)/2 = n^2-N/2 
now, if we plug in n=10^9, then n is insignificant to n^2

Short answer is n^2
######################################

What is the time complexity of a brute force approach, 
where you compare every possible pair in the array to check if there are any duplicates?
	O(n^2)
The brute-force solution using two nested loops has a time complexity of O(n^2)
 because for each element in the array, you need to iterate over up to n other elements.

	Nested loop in Java
public class NestedLoops
{

    public static void main(String[] args)
    {
        for (int row = 1; row <= 3; row++)
        {
            for (int col = 1; col <= 5; col++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}



######################################
What data structure can you use to optimize the approach for checking if there are any duplicate elements in the array?
A hashmap (or hashtable) and a HashSet allow us to store and retrieve values in constant time, O(1)



